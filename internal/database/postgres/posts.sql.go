// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: posts.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (public_id, title, author, slug, description, content) VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, public_id, title, author, content, description, slug, status, published_at, created_at, updated_at
`

type CreatePostParams struct {
	PublicID    string
	Title       string
	Author      string
	Slug        string
	Description string
	Content     string
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, createPost,
		arg.PublicID,
		arg.Title,
		arg.Author,
		arg.Slug,
		arg.Description,
		arg.Content,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.Title,
		&i.Author,
		&i.Content,
		&i.Description,
		&i.Slug,
		&i.Status,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPost = `-- name: GetPost :one
SELECT id, public_id, title, author, content, description, slug, status, published_at, created_at, updated_at FROM posts WHERE public_id = $1
`

func (q *Queries) GetPost(ctx context.Context, publicID string) (Post, error) {
	row := q.db.QueryRow(ctx, getPost, publicID)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.Title,
		&i.Author,
		&i.Content,
		&i.Description,
		&i.Slug,
		&i.Status,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPostBySlug = `-- name: GetPostBySlug :one
SELECT id, public_id, title, author, content, description, slug, status, published_at, created_at, updated_at FROM posts WHERE slug = $1
`

func (q *Queries) GetPostBySlug(ctx context.Context, slug string) (Post, error) {
	row := q.db.QueryRow(ctx, getPostBySlug, slug)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.Title,
		&i.Author,
		&i.Content,
		&i.Description,
		&i.Slug,
		&i.Status,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPosts = `-- name: GetPosts :many
SELECT id, public_id, title, author, content, description, slug, status, published_at, created_at, updated_at FROM posts WHERE status = 'published' ORDER BY published_at DESC
`

func (q *Queries) GetPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.Query(ctx, getPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.Title,
			&i.Author,
			&i.Content,
			&i.Description,
			&i.Slug,
			&i.Status,
			&i.PublishedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts SET title = $1, author = $2, slug = $3, description = $4, content = $5, status = $6, published_at = $7, updated_at = now() WHERE id = $8 RETURNING id, public_id, title, author, content, description, slug, status, published_at, created_at, updated_at
`

type UpdatePostParams struct {
	Title       string
	Author      string
	Slug        string
	Description string
	Content     string
	Status      PostStatus
	PublishedAt pgtype.Timestamp
	ID          int32
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, updatePost,
		arg.Title,
		arg.Author,
		arg.Slug,
		arg.Description,
		arg.Content,
		arg.Status,
		arg.PublishedAt,
		arg.ID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.Title,
		&i.Author,
		&i.Content,
		&i.Description,
		&i.Slug,
		&i.Status,
		&i.PublishedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
