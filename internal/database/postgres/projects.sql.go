// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: projects.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (public_id, name, description, tags, thumbnail_url, website_url, live, post_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING id, public_id, name, description, tags, thumbnail_url, website_url, live, created_at, updated_at, post_id
`

type CreateProjectParams struct {
	PublicID     string
	Name         string
	Description  string
	Tags         []string
	ThumbnailUrl string
	WebsiteUrl   string
	Live         bool
	PostID       pgtype.Int4
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, createProject,
		arg.PublicID,
		arg.Name,
		arg.Description,
		arg.Tags,
		arg.ThumbnailUrl,
		arg.WebsiteUrl,
		arg.Live,
		arg.PostID,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.Name,
		&i.Description,
		&i.Tags,
		&i.ThumbnailUrl,
		&i.WebsiteUrl,
		&i.Live,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PostID,
	)
	return i, err
}

const getProject = `-- name: GetProject :one
SELECT id, public_id, name, description, tags, thumbnail_url, website_url, live, created_at, updated_at, post_id FROM projects WHERE public_id = $1
`

func (q *Queries) GetProject(ctx context.Context, publicID string) (Project, error) {
	row := q.db.QueryRow(ctx, getProject, publicID)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.Name,
		&i.Description,
		&i.Tags,
		&i.ThumbnailUrl,
		&i.WebsiteUrl,
		&i.Live,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PostID,
	)
	return i, err
}

const getProjects = `-- name: GetProjects :many
SELECT id, public_id, name, description, tags, thumbnail_url, website_url, live, created_at, updated_at, post_id FROM projects ORDER BY created_at DESC
`

func (q *Queries) GetProjects(ctx context.Context) ([]Project, error) {
	rows, err := q.db.Query(ctx, getProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.PublicID,
			&i.Name,
			&i.Description,
			&i.Tags,
			&i.ThumbnailUrl,
			&i.WebsiteUrl,
			&i.Live,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PostID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
