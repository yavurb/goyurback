// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: apikeys.sql

package postgres

import (
	"context"
)

const createAPIKey = `-- name: CreateAPIKey :one
INSERT INTO apikeys (public_id, name, key) VALUES ($1, $2, $3) RETURNING id, public_id, name, key, revoked, revoked_at, created_at, updated_at
`

type CreateAPIKeyParams struct {
	PublicID string
	Name     string
	Key      string
}

func (q *Queries) CreateAPIKey(ctx context.Context, arg CreateAPIKeyParams) (Apikey, error) {
	row := q.db.QueryRow(ctx, createAPIKey, arg.PublicID, arg.Name, arg.Key)
	var i Apikey
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.Name,
		&i.Key,
		&i.Revoked,
		&i.RevokedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const revokeAPIKey = `-- name: RevokeAPIKey :exec
UPDATE apikeys SET revoked_at = now(), updated_at = now(), revoked = true WHERE public_id = $1 RETURNING id, public_id, name, key, revoked, revoked_at, created_at, updated_at
`

func (q *Queries) RevokeAPIKey(ctx context.Context, publicID string) error {
	_, err := q.db.Exec(ctx, revokeAPIKey, publicID)
	return err
}
